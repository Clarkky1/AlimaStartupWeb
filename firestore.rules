rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Users collection
    match /users/{userId} {
      // Allow public read for basic profile info
      allow read: if true;
      
      // Allow users to create their own profile
      allow create: if isAuthenticated() && isOwner(userId);
      
      // Allow users to update their own profile
      allow update: if isOwner(userId);
      
      // Only admin can delete users
      allow delete: if isAdmin();
    }

    // Services collection
    match /services/{serviceId} {
      // Public read access for services
      allow read: if true;
      
      // Allow querying services
      allow list: if true;
      
      // Only authenticated users can create services
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      
      // Only the service owner can update it
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      
      // Only the service owner can delete it
      allow delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }

    // Reviews collection
    match /reviews/{reviewId} {
      // Public read access for reviews
      allow read: if true;
      
      // Only authenticated users can create reviews for existing services
      allow create: if isAuthenticated() && 
        exists(/databases/$(database)/documents/services/$(request.resource.data.serviceId));
      
      // Only the review owner can update their review
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      
      // Only admin can delete reviews
      allow delete: if isAdmin();
    }

    // Conversations collection
    match /conversations/{conversationId} {
      // Allow reading conversation if user is a participant
      allow read: if isAuthenticated() && 
        request.auth.uid in resource.data.participants;

      // Allow querying conversations where user is a participant
      allow list: if isAuthenticated() && 
        request.query.filters.fieldPaths.hasAny(['participants']) &&
        request.query.filters.fieldPaths[0] == 'participants' &&
        request.query.filters.operations[0] == 'array-contains' &&
        request.query.filters.values[0] == request.auth.uid;

      // Allow creating conversation if user is a participant
      allow create: if isAuthenticated() && 
        request.auth.uid in request.resource.data.participants;

      // Allow updating conversation if user is a participant
      allow update: if isAuthenticated() && 
        request.auth.uid in resource.data.participants;

      // Only admin can delete conversations
      allow delete: if isAdmin();
    }

    // Messages collection
    match /messages/{messageId} {
      // Allow reading messages if user is a participant in the conversation
      allow read: if isAuthenticated() && 
        exists(/databases/$(database)/documents/conversations/$(resource.data.conversationId)) &&
        (request.auth.uid in get(/databases/$(database)/documents/conversations/$(resource.data.conversationId)).data.participants);
        
      // Allow querying messages
      allow list: if isAuthenticated();

      // Allow message creation if user is the sender and the conversation exists
      allow create: if isAuthenticated() && 
        request.resource.data.senderId == request.auth.uid &&
        exists(/databases/$(database)/documents/conversations/$(request.resource.data.conversationId)) &&
        (request.auth.uid in get(/databases/$(database)/documents/conversations/$(request.resource.data.conversationId)).data.participants);

      // Allow updating only specific fields and only by sender
      allow update: if isAuthenticated() && 
        request.auth.uid == resource.data.senderId && 
        (!request.resource.data.diff(resource.data).affectedKeys()
         .hasAny(['senderId', 'conversationId', 'timestamp', 'text']));

      // Only admin can delete messages
      allow delete: if isAdmin();
    }

    // Notifications collection
    match /notifications/{notificationId} {
      // Users can only read their own notifications
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      
      // Allow authenticated users to create notifications
      allow create: if isAuthenticated();
      
      // Users can update their own notifications (e.g., to mark as read)
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      
      // Only admin can delete notifications
      allow delete: if isAdmin();
    }

    // Transactions collection
    match /transactions/{transactionId} {
      // Only transaction participants can view transactions
      allow read: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin());
      
      // Allow reading all transactions for dashboard (query-level rule)
      allow list: if isAuthenticated() &&
         ((request.query.limit <= 100 && 
          request.query.filters.fieldPaths.hasAny(['userId'])) ||
          request.query.filters.fieldPaths.hasAny(['paymentProofUrl']));
      
      // Users can create transactions for existing services
      allow create: if isAuthenticated() && 
        exists(/databases/$(database)/documents/services/$(request.resource.data.serviceId));
      
      // Allow specific updates based on role
      allow update: if isAuthenticated() && 
        ((resource.data.userId == request.auth.uid && 
          request.resource.data.diff(resource.data).affectedKeys()
            .hasOnly(['paymentProofUrl', 'cloudinaryId', 'updatedAt'])) ||
         isAdmin());
      
      // Only admin can delete transactions
      allow delete: if isAdmin();
    }

    // Categories collection
    match /categories/{categoryId} {
      // Public read access for categories
      allow read: if true;
      
      // Only admin can modify categories
      allow write: if isAdmin();
    }

    // Payment information collection
    match /paymentInfo/{userId} {
      // Only the owner can access payment info
      allow read: if isAuthenticated() && request.auth.uid == userId;
      
      // Only the owner can modify payment info
      allow write: if isAuthenticated() && request.auth.uid == userId;
    }

    // Payment Proofs collection
    match /payment_proofs/{proofId} {
      // Only transaction participants can view proofs
      allow read: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin());
      
      // Users can create payment proofs for existing transactions
      allow create: if isAuthenticated() && 
        exists(/databases/$(database)/documents/transactions/$(request.resource.data.transactionId));
      
      // Only admin can modify or delete payment proofs
      allow update, delete: if isAdmin();
    }
    
    // Chat payments
    match /chatPayments/{paymentId} {
      // Only participants can view payments
      allow read: if isAuthenticated() && 
        (resource.data.senderId == request.auth.uid || 
         resource.data.receiverId == request.auth.uid || 
         isAdmin());
      
      // Authenticated users can create payments
      allow create: if isAuthenticated();
      
      // Only admin can modify payments
      allow update: if isAdmin();
      
      // Only admin can delete payments
      allow delete: if isAdmin();
    }
    
    // Bookings collection
    match /bookings/{bookingId} {
      allow read: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow delete: if isAdmin();
    }
    
    // Admin access for all documents
    match /{document=**} {
      allow read, write: if isAdmin();
    }
  }
}



# Firebase Configuration
NEXT_PUBLIC_FIREBASE_API_KEY=AIzaSyCDG5gqqy173zA7Mqk5KIZJqi6l_iTyVUw
NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=alima-dba7b.firebaseapp.com
NEXT_PUBLIC_FIREBASE_PROJECT_ID=alima-dba7b
NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=alima-dba7b.appspot.com
NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=509087452493
NEXT_PUBLIC_FIREBASE_APP_ID=1:509087452493:web:f8a70303e6c07ecddbfb04
NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID=G-2242BDYTJR 

# Cloudinary Configuration
CLOUDINARY_CLOUD_NAME=duslhnwq0
CLOUDINARY_API_KEY=274397788634213
CLOUDINARY_API_SECRET=2lPB8fgDbzUsAiAS_vQj0fuZ-0k
